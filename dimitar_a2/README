************************************************************************
Dimitar Dimitrov                                                 0922289
CIS4650                                                               A2
March 2, 2020
************************************************************************

C- compiler checkpoint 1. Uses jflex and cup to generate abstract syntax
tree given C minus file as input.

Compilation
-----------
    - In addition to all the .java files listed in the makefile, make 
      sure that "cminus.flex", "cminus.cup" are both present in the root
      directory.

    - Compile in root directory with "make". This will generate all java
      .class files necessary to run the programs.

Usage
-----
    Scanner Tool:
    - List all the tokens from the cm_progs/fac.cm program by name:
      make run_scanner

    Parser:
    - Parse all programs in cm_progs/ and print resulting ASTs:
      make run_parser

    Error Handling Tests:
    - Parse programs with various errors that can be handled by compiler:
      make run_test{x} where x is the test file number (1-5).

Further Changes
---------------
    - If more time was provided I would:
      Improve my error handling to solve more syntax errors.

Test Plan (Scanner)
-------------------
    - Run scanner with test programs in cm_progs/.
    - Ensure complete scan without errors or exceptions.
    - Manually examine any differences between output tokens and program 
      tokens.

    (1) fac.cm 
    (2) gcd.cm
    (3) selection_sort.cm

Test Plan (Parser)
------------------
    - Run parser without abstract syntax tree on test programs in 
      cm_progs/.
    - Ensure full parsing of programs without errors or exceptions.
    - Run parser with full abstract syntax tree on test programs in
      cm_progs/.
    - Manually examine any differences between tree structure and 
      actual program structure.

    (1) fac.cm
    (2) gcd.cm
    (3) selection_sort.cm

Test Plan (Error Handling)
--------------------------
    - Generate AST for every program in cm_progs_test/. Compare 
      actual and expected output for syntax tree.

    (1.cm) Compile without errors:
        - Expected: Complete AST.

    (2.cm) Empty file (declaration list error):
        - Expected: Empty AST.

    (3.cm) Missing semicolons and closing brace:
        - Expected: Complete AST recovery.
    
    (4.cm) Invalid comparison expression, assignment expression:
        - Expected: AST recovery with if exp and assignment omitted.
    
    (5.cm) Invalid type declaration and argument lists:
        - Expected: AST recovery with error type replacement and
                    function calls with empty argument lists.

References
----------
    - Used sample parser for "Tiny" language created by Fei Song as
      a reference for this cminus parser.
