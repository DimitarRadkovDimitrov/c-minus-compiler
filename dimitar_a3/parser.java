
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import absyn.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\005\000\002\004\010\000" +
    "\002\004\005\000\002\004\010\000\002\004\005\000\002" +
    "\004\010\000\002\006\003\000\002\006\003\000\002\005" +
    "\010\000\002\005\010\000\002\007\003\000\002\007\003" +
    "\000\002\010\005\000\002\010\003\000\002\012\004\000" +
    "\002\012\006\000\002\013\006\000\002\013\006\000\002" +
    "\011\004\000\002\011\003\000\002\011\002\000\002\014" +
    "\004\000\002\014\003\000\002\014\002\000\002\014\003" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\007\000\002\017\011\000\002\017\007\000\002" +
    "\017\005\000\002\017\004\000\002\020\005\000\002\020" +
    "\010\000\002\020\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\024\005\000\002\024\003" +
    "\000\002\024\006\000\002\024\006\000\002\024\003\000" +
    "\002\015\003\000\002\015\002\000\002\016\005\000\002" +
    "\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\010\003\006\006\013\010\011\001\002\000" +
    "\004\002\200\001\002\000\012\002\000\003\175\006\013" +
    "\010\011\001\002\000\014\002\ufffb\003\ufffb\006\ufffb\010" +
    "\ufffb\035\170\001\002\000\004\035\014\001\002\000\012" +
    "\002\ufffc\003\ufffc\006\ufffc\010\ufffc\001\002\000\004\035" +
    "\ufff3\001\002\000\012\002\ufffd\003\ufffd\006\ufffd\010\ufffd" +
    "\001\002\000\004\035\ufff4\001\002\000\012\003\015\025" +
    "\016\027\017\033\020\001\002\000\034\002\ufff6\003\ufff6" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\025\ufff6\027" +
    "\ufff6\031\ufff6\032\ufff6\035\ufff6\036\ufff6\001\002\000\034" +
    "\002\ufffa\003\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\025\ufffa\027\ufffa\031\ufffa\032\ufffa\035\ufffa\036\ufffa" +
    "\001\002\000\006\006\013\010\030\001\002\000\004\036" +
    "\021\001\002\000\004\034\022\001\002\000\006\003\023" +
    "\025\024\001\002\000\034\002\ufff5\003\ufff5\004\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\025\ufff5\027\ufff5\031\ufff5" +
    "\032\ufff5\035\ufff5\036\ufff5\001\002\000\034\002\ufff9\003" +
    "\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\025\ufff9" +
    "\027\ufff9\031\ufff9\032\ufff9\035\ufff9\036\ufff9\001\002\000" +
    "\006\026\166\030\ufff0\001\002\000\004\035\163\001\002" +
    "\000\004\030\032\001\002\000\006\030\uffef\035\ufff3\001" +
    "\002\000\006\026\uffed\030\uffed\001\002\000\004\031\034" +
    "\001\002\000\012\002\ufff2\003\ufff2\006\ufff2\010\ufff2\001" +
    "\002\000\032\003\035\004\uffe6\006\013\007\uffe6\010\011" +
    "\011\uffe6\025\uffe6\027\uffe6\031\uffe6\032\uffe6\035\uffe6\036" +
    "\uffe6\001\002\000\004\035\062\001\002\000\004\035\162" +
    "\001\002\000\032\003\uffe7\004\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\025\uffe7\027\uffe7\031\uffe7\032\uffe7\035\uffe7" +
    "\036\uffe7\001\002\000\032\003\057\004\051\006\013\007" +
    "\047\010\011\011\046\025\045\027\052\031\034\032\uffe3" +
    "\035\053\036\054\001\002\000\026\003\uffe4\004\uffe4\007" +
    "\uffe4\011\uffe4\025\uffe4\027\uffe4\031\uffe4\032\uffe4\035\uffe4" +
    "\036\uffe4\001\002\000\026\003\160\004\051\007\047\011" +
    "\046\025\045\027\052\031\034\032\157\035\053\036\054" +
    "\001\002\000\030\003\uffdf\004\uffdf\005\uffdf\007\uffdf\011" +
    "\uffdf\025\uffdf\027\uffdf\031\uffdf\032\uffdf\035\uffdf\036\uffdf" +
    "\001\002\000\032\012\144\013\146\016\140\017\143\020" +
    "\142\021\137\022\141\023\145\025\uffd0\026\uffd0\030\uffd0" +
    "\034\uffd0\001\002\000\030\003\uffe0\004\uffe0\005\uffe0\007" +
    "\uffe0\011\uffe0\025\uffe0\027\uffe0\031\uffe0\032\uffe0\035\uffe0" +
    "\036\uffe0\001\002\000\004\027\133\001\002\000\012\025" +
    "\131\027\052\035\053\036\054\001\002\000\004\025\127" +
    "\001\002\000\004\027\121\001\002\000\010\027\052\035" +
    "\053\036\054\001\002\000\044\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\111\025\uffc8\026\uffc8\027\074\030\uffc8\033\110" +
    "\034\uffc8\001\002\000\036\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\025\uffc5\026\uffc5\030\uffc5\034\uffc5\001\002\000\036\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\025\uffca\026\uffca\030\uffca\034" +
    "\uffca\001\002\000\036\012\uffcd\013\uffcd\014\071\015\070" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\025" +
    "\uffcd\026\uffcd\030\uffcd\034\uffcd\001\002\000\026\003\uffe2" +
    "\004\uffe2\007\uffe2\011\uffe2\025\uffe2\027\uffe2\031\uffe2\032" +
    "\uffe2\035\uffe2\036\uffe2\001\002\000\032\003\uffe8\004\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\025\uffe8\027\uffe8\031" +
    "\uffe8\032\uffe8\035\uffe8\036\uffe8\001\002\000\012\025\uffd7" +
    "\026\uffd7\030\uffd7\034\uffd7\001\002\000\006\025\063\033" +
    "\064\001\002\000\034\002\ufff8\003\ufff8\004\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\025\ufff8\027\ufff8\031\ufff8\032" +
    "\ufff8\035\ufff8\036\ufff8\001\002\000\004\036\065\001\002" +
    "\000\004\034\066\001\002\000\004\025\067\001\002\000" +
    "\034\002\ufff7\003\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\025\ufff7\027\ufff7\031\ufff7\032\ufff7\035\ufff7\036" +
    "\ufff7\001\002\000\010\027\052\035\072\036\054\001\002" +
    "\000\010\027\052\035\072\036\054\001\002\000\042\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\025\uffc8\026\uffc8\027\074\030" +
    "\uffc8\033\075\034\uffc8\001\002\000\036\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\025\uffcc\026\uffcc\030\uffcc\034\uffcc\001\002" +
    "\000\014\003\103\027\052\030\uffc3\035\053\036\054\001" +
    "\002\000\010\027\052\035\053\036\054\001\002\000\004" +
    "\034\077\001\002\000\036\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\025\uffc7\026\uffc7\030\uffc7\034\uffc7\001\002\000\006\026" +
    "\uffc1\030\uffc1\001\002\000\006\026\105\030\uffc4\001\002" +
    "\000\004\030\104\001\002\000\006\026\uffc0\030\uffc0\001" +
    "\002\000\036\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026" +
    "\uffc6\030\uffc6\034\uffc6\001\002\000\010\027\052\035\053" +
    "\036\054\001\002\000\006\026\uffc2\030\uffc2\001\002\000" +
    "\036\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb\030" +
    "\uffcb\034\uffcb\001\002\000\010\027\052\035\053\036\054" +
    "\001\002\000\010\027\052\035\053\036\054\001\002\000" +
    "\012\025\uffd9\026\uffd9\030\uffd9\034\uffd9\001\002\000\004" +
    "\034\114\001\002\000\040\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\115\025\uffc7\026\uffc7\030\uffc7\034\uffc7\001\002\000" +
    "\010\027\052\035\053\036\054\001\002\000\012\025\uffd8" +
    "\026\uffd8\030\uffd8\034\uffd8\001\002\000\004\030\120\001" +
    "\002\000\036\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\026" +
    "\uffc9\030\uffc9\034\uffc9\001\002\000\010\027\052\035\053" +
    "\036\054\001\002\000\004\030\123\001\002\000\022\004" +
    "\051\007\047\011\046\025\045\027\052\031\034\035\053" +
    "\036\054\001\002\000\030\003\uffde\004\uffde\005\125\007" +
    "\uffde\011\uffde\025\uffde\027\uffde\031\uffde\032\uffde\035\uffde" +
    "\036\uffde\001\002\000\022\004\051\007\047\011\046\025" +
    "\045\027\052\031\034\035\053\036\054\001\002\000\030" +
    "\003\uffdd\004\uffdd\005\uffdd\007\uffdd\011\uffdd\025\uffdd\027" +
    "\uffdd\031\uffdd\032\uffdd\035\uffdd\036\uffdd\001\002\000\030" +
    "\003\uffe1\004\uffe1\005\uffe1\007\uffe1\011\uffe1\025\uffe1\027" +
    "\uffe1\031\uffe1\032\uffe1\035\uffe1\036\uffe1\001\002\000\004" +
    "\025\132\001\002\000\030\003\uffda\004\uffda\005\uffda\007" +
    "\uffda\011\uffda\025\uffda\027\uffda\031\uffda\032\uffda\035\uffda" +
    "\036\uffda\001\002\000\030\003\uffdb\004\uffdb\005\uffdb\007" +
    "\uffdb\011\uffdb\025\uffdb\027\uffdb\031\uffdb\032\uffdb\035\uffdb" +
    "\036\uffdb\001\002\000\010\027\052\035\053\036\054\001" +
    "\002\000\004\030\135\001\002\000\022\004\051\007\047" +
    "\011\046\025\045\027\052\031\034\035\053\036\054\001" +
    "\002\000\030\003\uffdc\004\uffdc\005\uffdc\007\uffdc\011\uffdc" +
    "\025\uffdc\027\uffdc\031\uffdc\032\uffdc\035\uffdc\036\uffdc\001" +
    "\002\000\010\027\052\035\072\036\054\001\002\000\010" +
    "\027\052\035\072\036\054\001\002\000\010\027\052\035" +
    "\072\036\054\001\002\000\010\027\052\035\072\036\054" +
    "\001\002\000\010\027\052\035\072\036\054\001\002\000" +
    "\010\027\052\035\072\036\054\001\002\000\010\027\052" +
    "\035\072\036\054\001\002\000\010\027\052\035\072\036" +
    "\054\001\002\000\036\012\uffce\013\uffce\014\071\015\070" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\025" +
    "\uffce\026\uffce\030\uffce\034\uffce\001\002\000\016\012\144" +
    "\013\146\025\uffd1\026\uffd1\030\uffd1\034\uffd1\001\002\000" +
    "\036\012\uffcf\013\uffcf\014\071\015\070\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\030" +
    "\uffcf\034\uffcf\001\002\000\016\012\144\013\146\025\uffd6" +
    "\026\uffd6\030\uffd6\034\uffd6\001\002\000\016\012\144\013" +
    "\146\025\uffd4\026\uffd4\030\uffd4\034\uffd4\001\002\000\016" +
    "\012\144\013\146\025\uffd2\026\uffd2\030\uffd2\034\uffd2\001" +
    "\002\000\016\012\144\013\146\025\uffd5\026\uffd5\030\uffd5" +
    "\034\uffd5\001\002\000\016\012\144\013\146\025\uffd3\026" +
    "\uffd3\030\uffd3\034\uffd3\001\002\000\036\002\uffea\003\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\025" +
    "\uffea\027\uffea\031\uffea\032\uffea\035\uffea\036\uffea\001\002" +
    "\000\036\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\025\uffe9\027\uffe9\031\uffe9\032\uffe9" +
    "\035\uffe9\036\uffe9\001\002\000\026\003\uffe5\004\uffe5\007" +
    "\uffe5\011\uffe5\025\uffe5\027\uffe5\031\uffe5\032\uffe5\035\uffe5" +
    "\036\uffe5\001\002\000\010\003\015\025\016\033\020\001" +
    "\002\000\010\026\uffec\030\uffec\033\164\001\002\000\004" +
    "\034\165\001\002\000\006\026\uffeb\030\uffeb\001\002\000" +
    "\006\006\013\010\011\001\002\000\006\026\uffee\030\uffee" +
    "\001\002\000\010\025\063\027\171\033\064\001\002\000" +
    "\006\006\013\010\030\001\002\000\004\030\173\001\002" +
    "\000\004\031\034\001\002\000\012\002\ufff1\003\ufff1\006" +
    "\ufff1\010\ufff1\001\002\000\004\035\170\001\002\000\012" +
    "\002\ufffe\003\ufffe\006\ufffe\010\ufffe\001\002\000\012\002" +
    "\uffff\003\uffff\006\uffff\010\uffff\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\014\002\003\003\004\004\011\005\007\006" +
    "\006\001\001\000\002\001\001\000\010\004\176\005\175" +
    "\006\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\025\007\026\010\024\012\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\032\001\001\000\002\001\001\000\010" +
    "\004\036\006\035\011\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\057\006\035" +
    "\013\042\014\041\017\040\020\047\021\060\022\043\023" +
    "\055\024\054\001\001\000\002\001\001\000\020\013\042" +
    "\017\160\020\047\021\060\022\043\023\055\024\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\127\021\060\022\043\023" +
    "\055\024\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\116\021\060\022\043\023\055\024\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\106\001\001\000\004\024\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\101\016" +
    "\100\020\077\021\060\022\043\023\055\024\054\001\001" +
    "\000\014\020\075\021\060\022\043\023\055\024\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\105\021\060\022\043\023\055" +
    "\024\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\112\021\060\022\043\023\055\024\054\001\001" +
    "\000\014\020\111\021\060\022\043\023\055\024\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\115\021\060\022\043\023\055\024\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\121\021\060\022\043\023\055\024\054\001" +
    "\001\000\002\001\001\000\020\013\042\017\123\020\047" +
    "\021\060\022\043\023\055\024\054\001\001\000\002\001" +
    "\001\000\020\013\042\017\125\020\047\021\060\022\043" +
    "\023\055\024\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\133\021\060\022\043\023\055\024\054\001" +
    "\001\000\002\001\001\000\020\013\042\017\135\020\047" +
    "\021\060\022\043\023\055\024\054\001\001\000\002\001" +
    "\001\000\010\022\155\023\055\024\054\001\001\000\010" +
    "\022\154\023\055\024\054\001\001\000\010\022\153\023" +
    "\055\024\054\001\001\000\010\022\152\023\055\024\054" +
    "\001\001\000\010\022\151\023\055\024\054\001\001\000" +
    "\006\023\150\024\054\001\001\000\010\022\147\023\055" +
    "\024\054\001\001\000\006\023\146\024\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\025\012\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\025\007\171\010\024\012\030\001\001\000\002\001\001" +
    "\000\004\013\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) 
    {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) 
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) 
            {                
                m.append(" in line "+(s.left+1));   

                if (s.right >= 0)    
                {
                    m.append(", column "+(s.right+1));
                }                
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) 
    {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec_list 
            {
              DecList RESULT =null;
		int d_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList d_l = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d_l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list ::= dec_list var_dec 
            {
              DecList RESULT =null;
		int d_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList d_l = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v_d = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        DecList decList = d_l;
                        while (decList.tail != null)
                        {
                           decList = decList.tail;
                        }

                        decList.tail = new DecList(v_d, null);
                        RESULT = d_l; 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= dec_list func_dec 
            {
              DecList RESULT =null;
		int d_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList d_l = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec f_d = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        DecList decList = d_l;
                        while (decList.tail != null)
                        {
                           decList = decList.tail;
                        }

                        decList.tail = new DecList(f_d, null);
                        RESULT = d_l; 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_list ::= var_dec 
            {
              DecList RESULT =null;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v_d = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new DecList(v_d, null); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_list ::= func_dec 
            {
              DecList RESULT =null;
		int f_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec f_d = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new DecList(f_d, null); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_list ::= error 
            {
              DecList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String errorMsg = String.format("Invalid declaration list syntax (DecList) - line %d\n", eleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new DecList(new NilDec(eleft, eright), null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_dec ::= type_spec ID SEMI 
            {
              VarDec RESULT =null;
		int t_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy t_s = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        RESULT = new SimpleDec(idleft, idright, t_s, id); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_dec ::= type_spec ID LSQBRACK NUM RSQBRACK SEMI 
            {
              VarDec RESULT =null;
		int t_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t_s = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                        RESULT = new ArrayDec(idleft, idright, t_s, id, new IntExp(nleft, nright, Integer.parseInt(n))); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_dec ::= error ID SEMI 
            {
              VarDec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        String errorMsg = String.format("Invalid type syntax (NameTy) - line %d\n", eleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new SimpleDec(eleft, eright, new NameTy(eleft, eright, NameTy.ERROR), id);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_dec ::= error ID LSQBRACK NUM RSQBRACK SEMI 
            {
              VarDec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        String errorMsg = String.format("Invalid type syntax (NameTy) - line %d\n", eleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new ArrayDec(eleft, eright, new NameTy(eleft, eright, NameTy.ERROR), id, new IntExp(nleft, nright, Integer.parseInt(n))); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_dec ::= type_spec ID error 
            {
              VarDec RESULT =null;
		int t_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy t_s = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String errorMsg = String.format("Invalid variable declaration syntax (VarDec). Expected \";\" - line %d\n", t_sleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new SimpleDec(t_sleft, t_sright, t_s, id);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_dec ::= type_spec ID LSQBRACK NUM RSQBRACK error 
            {
              VarDec RESULT =null;
		int t_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t_s = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String errorMsg = String.format("Invalid variable declaration syntax (VarDec). Expected \";\" - line %d\n", t_sleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new ArrayDec(t_sleft, t_sright, t_s, id, new IntExp(nleft, nright, Integer.parseInt(n))); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_spec ::= INT 
            {
              NameTy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NameTy(ileft, iright, NameTy.INT);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_spec ::= VOID 
            {
              NameTy RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NameTy(vleft, vright, NameTy.VOID);  
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_dec ::= type_spec ID LPAREN params RPAREN cmp_state 
            {
              FunctionDec RESULT =null;
		int t_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameTy t_s = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c_s = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new FunctionDec(idleft, idright, t_s, id, p, c_s);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_dec ::= error ID LPAREN params RPAREN cmp_state 
            {
              FunctionDec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c_s = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String errorMsg = String.format("Invalid type syntax (FunctionDec) - line %d\n", idleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new FunctionDec(eleft, eright, new NameTy(eleft, eright, NameTy.ERROR), id, p, c_s);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // params ::= param_list 
            {
              VarDecList RESULT =null;
		int p_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecList p_l = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // params ::= VOID 
            {
              VarDecList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param_list ::= param_list COMMA param 
            {
              VarDecList RESULT =null;
		int p_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList p_l = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        VarDecList varDecList = p_l;
                        while (varDecList.tail != null)
                        {
                           varDecList = varDecList.tail;
                        }

                        varDecList.tail = new VarDecList(p, null);
                        RESULT = p_l; 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param_list ::= param 
            {
              VarDecList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec p = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new VarDecList(p, null); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= type_spec ID 
            {
              VarDec RESULT =null;
		int t_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NameTy t_s = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new SimpleDec(t_sleft, t_sright, t_s, id); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= type_spec ID LSQBRACK RSQBRACK 
            {
              VarDec RESULT =null;
		int t_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameTy t_s = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                        RESULT = new ArrayDec(t_sleft, t_sright, t_s, id, null); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cmp_state ::= LBRACK local_dec_list state_list RBRACK 
            {
              CompoundExp RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList l_d = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList s_l = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        RESULT = new CompoundExp(lbleft, lbright, l_d, s_l); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_state",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cmp_state ::= LBRACK local_dec_list state_list error 
            {
              CompoundExp RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList l_d = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList s_l = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String errorMsg = String.format("Invalid statement syntax (CompoundExp) - line %d. Expected \"}\"\n", eleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new CompoundExp(lbleft, lbright, l_d, s_l); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp_state",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // local_dec_list ::= local_dec_list var_dec 
            {
              VarDecList RESULT =null;
		int l_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecList l_d = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v_d = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        VarDecList varDecList = l_d;
                        while (varDecList.tail != null)
                        {
                           varDecList = varDecList.tail;
                        }

                        varDecList.tail = new VarDecList(v_d, null);
                        RESULT = l_d; 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_dec_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // local_dec_list ::= var_dec 
            {
              VarDecList RESULT =null;
		int v_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v_d = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new VarDecList(v_d, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_dec_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // local_dec_list ::= 
            {
              VarDecList RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_dec_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // state_list ::= state_list statement 
            {
              ExpList RESULT =null;
		int s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList s_l = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ExpList expList = s_l;
                        while (expList.tail != null)
                        {
                           expList = expList.tail;
                        }

                        expList.tail = new ExpList(s, null);
                        RESULT = s_l;  
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // state_list ::= statement 
            {
              ExpList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new ExpList(s, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // state_list ::= 
            {
              ExpList RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // state_list ::= error 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String errorMsg = String.format("Invalid expression syntax (ExpList) - line %d\n", eleft + 1);
                        parser.report_error(errorMsg, e);
                        RESULT = new ExpList(new NilExp(eleft, eright), null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= exp SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= SEMI 
            {
              Exp RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new NilExp(semileft, semiright); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= cmp_state 
            {
              Exp RESULT =null;
		int c_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundExp c_s = (CompoundExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c_s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IF LPAREN exp RPAREN statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new IfExp(ileft, iright, e, s, null);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp s_1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s_2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new IfExp(ileft, iright, e, s_1, s_2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new WhileExp(wleft, wright, e, s); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= RETURN exp SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        RESULT = new ReturnExp(rleft, rright, e);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= RETURN SEMI 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new ReturnExp(rleft, rright, new NilExp(semileft, semiright));
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= ID ASSIGN exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new AssignExp(idleft, idright, new SimpleVar(idleft, idright, id), e); 
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= ID LSQBRACK exp RSQBRACK ASSIGN exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new AssignExp(idleft, idright, new IndexVar(idleft, idright, id, e1), e2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= simple_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_exp ::= add_exp LTE add_exp 
            {
              Exp RESULT =null;
		int a_e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a_e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a_e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new OpExp(a_e1left, a_e1right, a_e1, OpExp.LE, a_e2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= add_exp LT add_exp 
            {
              Exp RESULT =null;
		int a_e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a_e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a_e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new OpExp(a_e1left, a_e1right, a_e1, OpExp.LT, a_e2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_exp ::= add_exp GT add_exp 
            {
              Exp RESULT =null;
		int a_e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a_e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a_e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new OpExp(a_e1left, a_e1right, a_e1, OpExp.GT, a_e2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_exp ::= add_exp GTE add_exp 
            {
              Exp RESULT =null;
		int a_e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a_e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a_e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new OpExp(a_e1left, a_e1right, a_e1, OpExp.GE, a_e2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_exp ::= add_exp EQ add_exp 
            {
              Exp RESULT =null;
		int a_e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a_e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a_e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new OpExp(a_e1left, a_e1right, a_e1, OpExp.EQ, a_e2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_exp ::= add_exp NOTEQ add_exp 
            {
              Exp RESULT =null;
		int a_e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a_e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a_e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new OpExp(a_e1left, a_e1right, a_e1, OpExp.NE, a_e2);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= add_exp 
            {
              Exp RESULT =null;
		int a_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp a_e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a_e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // add_exp ::= add_exp PLUS term 
            {
              Exp RESULT =null;
		int a_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = new OpExp(a_eleft, a_eright, a_e, OpExp.PLUS, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // add_exp ::= add_exp MINUS term 
            {
              Exp RESULT =null;
		int a_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp a_e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = new OpExp(a_eleft, a_eright, a_e, OpExp.MINUS, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // add_exp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term TIMES factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = new OpExp(tleft, tright, t, OpExp.MUL, f);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term DIVIDE factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = new OpExp(tleft, tright, t, OpExp.DIV, f);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= ID 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new VarExp(idleft, idright, new SimpleVar(idleft, idright, id));
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= ID LSQBRACK exp RSQBRACK 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new VarExp(idleft, idright, new IndexVar(idleft, idright, id, e));
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= ID LPAREN args RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                     RESULT = new CallExp(idleft, idright, id, a);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= NUM 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = new IntExp(nleft, nright, Integer.parseInt(n));
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // args ::= arg_list 
            {
              ExpList RESULT =null;
		int a_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList a_l = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a_l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // args ::= 
            {
              ExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arg_list ::= arg_list COMMA exp 
            {
              ExpList RESULT =null;
		int a_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList a_l = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     ExpList expList = a_l;
                     while (expList.tail != null)
                     {
                        expList = expList.tail;
                     }

                     expList.tail = new ExpList(e, null);
                     RESULT = a_l; 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arg_list ::= exp 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                     RESULT = new ExpList(e, null); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arg_list ::= error 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     String errorMsg = String.format("Invalid argument list syntax (ExpList) - line %d\n", eleft + 1);
                     parser.report_error(errorMsg, e);
                     RESULT = new ExpList(new NilExp(eleft, eright), null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
